Steps I've Learnt:

- install pipenv, and django
- run "pipenv install"
- start django project by using "django-admin startproject project_name ."
  - the period at the end suggests that the project shall be created inside the current directory.
- run a server
  - either do django-admin runserver
    - this might not work because settings are not configured inside the manage.py 
  - or do "python manage.py runserver 9000"
    - here, 9000 is the port number; by default 8000
- run the python present inside the virtual env:
  - "Ctrl + Shift + P" then search "Python: Select interpreter" 
  - Paste the virtual environment path inside it and add "/bin/python" at the end
- check out the installed apps inside the settings.py
  - you can remove apps you don't want
- create an app using the command "python manage.py startapp anyrandomname"
  - just add the name inside the original settings.py

# Creating a view: A request handler
- views.py inside the newly created application
- create the functions there which the user will call as a request

# Configuring a URL for the users to access the functions you just created
- create url.py (name can be changed) where you will put all the urls together inside the newly created app
- inside that url.py, you will configure the URLs.

# Sending a dictionary through 'views.py' in order to use it inside the html 
- generally django is not used to create html like that in back, only for example it's showing that

# Putting aside the Models
- 

# Working with templates
- Integrating the sending of dictionary values from views.py while calling the views.
- Integrating an html instead of creating the html on demand using HttpResponse
  - Creating a templates directory at the root.
  - Adding the template directory name in the DIR part of the Templates of the settings.py
- Integrating two htmls together
  - By creating another base html (base i.e. same for all)
  - Adding jinja's {%  %} inside the htmls

# Using GET Http Method: (Example: Addition of two numbers)
- First, create one <form> that takes inputs with input type as "submit", 
- The <form> should have "add" as the action, so the URL can recognize and call the "add"
- The URL should point towards the views (User made function).
- Create a function inside the view, that does the addition and send the output to a result.html. 

# Using POST Http Method:
- First, inside the <form> add a word "method='POST'"
- Then, in the <form> add a jinja i.e., {% csrf_token %},
  - This specifies that our html will use csrf to avoid any attacks
- Then finally, change our function's (one inside the views.py) from GET to POST

Few Commands for pipenv:
- "pipenv --venv"
> To view the address of the virtual environment.

